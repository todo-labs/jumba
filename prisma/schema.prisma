generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role         @default(USER)
  Experiment    Experiment[]
  Imgs          Imgs[]
  Reviews       Reviews[]
  dob           DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Category {
  ASAIN
  AFRICAN
  BREAKFAST
  DESSERT
  DINNER
  HISPANIC
  INDIAN
  ITALIAN
  AMERICAN
  CHINESE
  JAPANESE
  MEDITERRANEAN
  VEGETARIAN
}

model Imgs {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  url          String
  Experiment   Experiment @relation(fields: [experimentId], references: [id])
  experimentId String
  approved     Boolean    @default(false)
  uploadedBy   User?      @relation(fields: [uploadedById], references: [id])
  uploadedById String?
}

model Reviews {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  rating       Int
  comment      String?
  Experiment   Experiment @relation(fields: [experimentId], references: [id])
  experimentId String
  reviewedBy   User?      @relation(fields: [reviewedById], references: [id])
  reviewedById String?
}

model Ingredient {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  icon         String
  name         String
  Experiment   Experiment @relation(fields: [experimentId], references: [id])
  experimentId String
}

model Experiment {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  title          String
  tag            Int
  inspiration    String?
  category       Category
  rawIngredients String[]
  steps          String[]
  duration       Int?
  feeds          Int?         @default(1)
  createdBy      User?        @relation(fields: [createdById], references: [id])
  createdById    String?
  imgs           Imgs[]
  reviews        Reviews[]
  ingredients    Ingredient[]
}
